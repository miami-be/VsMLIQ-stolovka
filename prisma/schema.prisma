//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model Meal {
  id          String      @id() @default(uuid())
  name        String?
  price       String?
  photoUrl    String?
  mealTags    MealTag[]   @relation("meal")
  orderItems  OrderItem[] @relation("meal")
  dateCreated DateTime    @default(now())
  dateUpdated DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model MealTag {
  id          String   @id() @default(uuid())
  name        String?
  mealId      String?
  meal        Meal?    @relation(fields: [mealId], references: [id], name: "meal")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Customer {
  id            String   @id() @default(uuid())
  name          String?
  parentContact String?
  class         String?
  balance       String?
  orders        Order[]  @relation("customer")
  dateCreated   DateTime @default(now())
  dateUpdated   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Order {
  id            String      @id() @default(uuid())
  date          String?
  amount        String?
  paymentMethod String?
  customerId    String?
  customer      Customer?   @relation(fields: [customerId], references: [id], name: "customer")
  orderItems    OrderItem[] @relation("order")
  dateCreated   DateTime    @default(now())
  dateUpdated   DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model OrderItem {
  id          String   @id() @default(uuid())
  quantity    Float?
  orderId     String?
  order       Order?   @relation(fields: [orderId], references: [id], name: "order")
  mealId      String?
  meal        Meal?    @relation(fields: [mealId], references: [id], name: "meal")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id              String     @id() @default(uuid())
  name            String?
  email           String?    @unique()
  pictureUrl      String?    @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation String?
  emailVerified   Boolean?
  status          UserStatus @default(VERIFIED)
  globalRole      String     @default("USER")
  /// @password
  /// @omit
  password        String?
  dateCreated     DateTime   @default(now())
  dateUpdated     DateTime   @default(now()) @updatedAt()
  accounts        Account[]
  sessions        Session[]
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
